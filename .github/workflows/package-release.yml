name: Package Release

# Required GitHub repository secrets:
# For Unity features (optional):
#   UNITY_LICENSE: Contents of your .ulf license file (Personal) OR UNITY_SERIAL (Professional)
#   UNITY_EMAIL: Your Unity account email  
#   UNITY_PASSWORD: Your Unity account password
# For UPM branch publishing:
#   PAT_TOKEN: Personal Access Token with 'repo' permissions (required for branch creation)
#   If PAT_TOKEN is not set, workflow will fall back to GITHUB_TOKEN (limited permissions)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      update_docs:
        description: 'Update documentation and deploy to GitHub Pages'
        required: false
        type: boolean
        default: false

env:
  UNITY_VERSION: 2022.3.f1

permissions:
  contents: write
  actions: read
  
jobs:
  validate-and-package:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Validate Inputs
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Invalid version format. Expected: X.Y.Z (e.g., 1.2.3)"
              exit 1
            fi
            echo "Version validated: $VERSION"
          fi

      # Unity License is now handled automatically by unity-builder and unity-test-runner actions
      # No separate activation step needed - just ensure UNITY_LICENSE secret is set
          
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Validate Package Structure
        run: |
          echo "Validating package structure..."
          
          # Check if required files exist
          if [ ! -d "Assets/Engine" ]; then
            echo "❌ Assets/Engine directory not found"
            exit 1
          fi
          
          if [ ! -f "Assets/Engine/package.json" ]; then
            echo "❌ package.json not found in Assets/Engine"
            exit 1
          fi
          
          echo "✅ Basic package structure validated"
          
          # To enable Unity validation, uncomment below and set GitHub secrets:
          # UNITY_LICENSE: Contents of your .ulf license file
          # OR UNITY_SERIAL: Your Unity Pro serial key
          
      # - name: Unity Package Validation  
      #   uses: game-ci/unity-builder@v4
      #   env:
      #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #     UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      #     UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      #   with:
      #     projectPath: .
      #     unityVersion: ${{ env.UNITY_VERSION }}
      #     targetPlatform: StandaloneLinux64
      #     buildMethod: Sinkii09.Engine.Editor.PackageExporter.ValidatePackageStructure
      #     allowDirtyBuild: true

      - name: Update Package Version
        if: github.event_name == 'workflow_dispatch'
        run: |
          sed -i 's/"version": ".*"/"version": "${{ github.event.inputs.version }}"/' Assets/Engine/package.json

      - name: Run Tests
        run: |
          echo "Running basic validation tests..."
          
          # Basic file structure tests
          test -d "Assets/Engine" || { echo "❌ Engine directory missing"; exit 1; }
          test -f "Assets/Engine/package.json" || { echo "❌ package.json missing"; exit 1; }
          
          echo "✅ Basic tests passed"
          
          # To enable Unity tests, uncomment below:
          
      # - name: Unity Test Runner
      #   uses: game-ci/unity-test-runner@v4
      #   env:
      #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #     UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      #     UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      #   with:
      #     projectPath: .
      #     unityVersion: ${{ env.UNITY_VERSION }}
      #     githubToken: ${{ secrets.GITHUB_TOKEN }}
      #     checkName: 'Engine Test Results'

      - name: Create Release Assets
        run: |
          echo "Creating release assets..."
          
          # Create Releases directory if it doesn't exist
          mkdir -p Releases
          
          # Copy engine assets to releases
          cp -r Assets/Engine Releases/
          
          echo "✅ Release assets created"
          
          # To enable Unity asset creation, uncomment below:
          
      # - name: Unity Create Release Assets
      #   uses: game-ci/unity-builder@v4
      #   env:
      #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #     UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      #     UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      #   with:
      #     projectPath: .
      #     unityVersion: ${{ env.UNITY_VERSION }}
      #     targetPlatform: StandaloneLinux64
      #     buildMethod: Sinkii09.Engine.Editor.PackageExporter.CreateReleaseFolder
      #     allowDirtyBuild: true

      - name: Package for Distribution
        run: |
          # Create distribution package
          mkdir -p dist
          cp -r Assets/Engine dist/
          
          # Create source archive
          tar -czf dist/sinkii09-engine-source.tar.gz Assets/Engine
          
          # Create documentation package
          mkdir -p dist/docs
          
          # Copy documentation files if they exist
          [ -f "Assets/Engine/README.md" ] && cp Assets/Engine/README.md dist/docs/ || echo "README.md not found, skipping"
          [ -f "Assets/Engine/CHANGELOG.md" ] && cp Assets/Engine/CHANGELOG.md dist/docs/ || echo "CHANGELOG.md not found, skipping"
          [ -f "README.md" ] && cp README.md dist/docs/ || echo "Root README.md not found, skipping"
          [ -f "CHANGELOG.md" ] && cp CHANGELOG.md dist/docs/ || echo "Root CHANGELOG.md not found, skipping"
          
          if [ -d "Documentation" ]; then
            cp -r Documentation dist/docs/
          else
            echo "Documentation directory not found, skipping"
          fi
          
          # Create a basic README if none exists
          if [ ! -f "dist/docs/README.md" ]; then
            echo "# Sinkii09 Engine Package" > dist/docs/README.md
            echo "Unity Engine Framework - Version ${{ github.event.inputs.version || github.event.release.tag_name }}" >> dist/docs/README.md
          fi

      - name: Upload Release Assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/sinkii09-engine-source.tar.gz
          tag_name: ${{ github.event.release.tag_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: engine-package
          path: |
            dist/
            Releases/
          retention-days: 30

      # Unity license cleanup is now handled automatically by the actions

  publish-upm:
    needs: validate-and-package
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          
      - name: Prepare UPM Branch
        run: |
          # Set git configuration
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Get version from release or workflow input
          VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
          echo "Package version: $VERSION"
          
          # Verify Engine assets exist before proceeding
          if [ ! -d "Assets/Engine" ]; then
            echo "❌ Assets/Engine directory not found in repository"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          echo "✅ Found Engine assets, proceeding with UPM branch creation..."
          
          # Fetch all branches
          git fetch origin || true
          
          # Debug: Show current directory and contents
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Verify package.json exists
          if [ ! -f "Assets/Engine/package.json" ]; then
            echo "❌ package.json not found in Assets/Engine"
            exit 1
          fi
          
          echo "✅ Found package.json, proceeding with UPM branch creation..."
          
          # Create temporary directory for backup
          TEMP_DIR="/tmp/engine-package-$(date +%s)"
          mkdir -p "$TEMP_DIR"
          
          # Store Engine assets before cleaning branch  
          echo "Backing up Engine assets to $TEMP_DIR..."
          cp -r Assets/Engine/* "$TEMP_DIR/" || { echo "Failed to backup Engine assets"; exit 1; }
          
          # Verify backup was successful
          if [ ! -f "$TEMP_DIR/package.json" ]; then
            echo "❌ Backup failed - package.json not found in backup"
            exit 1
          fi
          
          echo "✅ Backup successful"
          
          # Create or switch to upm branch
          if git show-ref --verify --quiet refs/remotes/origin/upm; then
            echo "UPM branch exists, checking out..."
            git checkout -B upm origin/upm
          else
            echo "Creating new UPM branch..."
            git checkout --orphan upm
          fi
          
          # Clean the branch
          echo "Cleaning UPM branch..."
          git rm -rf . 2>/dev/null || true
          
          # Remove any remaining files
          find . -maxdepth 1 -not -name '.git' -not -name '.' -exec rm -rf {} + 2>/dev/null || true
          
          # Copy package contents from backup
          echo "Restoring Engine assets to UPM branch..."
          cp -r "$TEMP_DIR"/* . || { echo "Failed to restore Engine assets from backup"; exit 1; }
          
          # Verify files were restored correctly
          if [ ! -f "package.json" ]; then
            echo "❌ package.json not found after restore"
            echo "Current directory contents after restore:"
            ls -la
            exit 1
          fi
          
          echo "✅ Engine assets successfully restored to UPM branch"
          echo "UPM branch contents:"
          ls -la
          
          # Clean up temp directory
          rm -rf "$TEMP_DIR"
          
          # Update package version if version input provided
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -f "package.json" ]; then
            sed -i 's/"version": ".*"/"version": "${{ github.event.inputs.version }}"/' package.json
          elif [ "${{ github.event_name }}" = "release" ] && [ -f "package.json" ]; then
            sed -i 's/"version": ".*"/"version": "${{ github.event.release.tag_name }}"/g' package.json
          fi
          
          # Stage and commit changes
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "UPM Package v${VERSION}" || { echo "Failed to commit changes"; exit 1; }
            
            # Try to push with error handling
            echo "Attempting to push to UPM branch..."
            if ! git push origin upm --force 2>&1; then
              echo "❌ Failed to push UPM branch. This might be due to:"
              echo "   1. Missing repository write permissions"
              echo "   2. Branch protection rules"
              echo "   3. Need for PAT_TOKEN secret instead of GITHUB_TOKEN"
              echo ""
              echo "💡 To fix this, add a Personal Access Token as 'PAT_TOKEN' secret:"
              echo "   1. Go to GitHub Settings > Developer settings > Personal access tokens"
              echo "   2. Generate new token with 'repo' permissions"
              echo "   3. Add it as 'PAT_TOKEN' secret in repository settings"
              exit 1
            else
              echo "✅ Successfully pushed UPM branch"
            fi
          fi

      - name: Create UPM Tag
        run: |
          VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
          UPM_TAG="upm/v${VERSION}"
          
          echo "Creating UPM tag: ${UPM_TAG}"
          
          # Create UPM tag
          if git tag -a "${UPM_TAG}" -m "UPM Package v${VERSION}"; then
            echo "✅ Tag created: ${UPM_TAG}"
            
            # Push the tag
            if git push origin "${UPM_TAG}"; then
              echo "✅ Tag pushed successfully: ${UPM_TAG}"
            else
              echo "⚠️ Failed to push tag: ${UPM_TAG} (might already exist)"
            fi
          else
            echo "⚠️ Tag creation failed: ${UPM_TAG} (might already exist)"
          fi

  update-documentation:
    needs: validate-and-package
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.update_docs == 'true')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Generate API Documentation
        run: |
          # Create docs directory
          mkdir -p docs
          
          # Install documentation tools if needed
          if [ -f "requirements-docs.txt" ]; then
            pip install -r requirements-docs.txt || echo "Failed to install documentation requirements"
          fi
          
          # Copy existing documentation
          if [ -d "Documentation" ]; then
            cp -r Documentation/* docs/ || echo "Failed to copy Documentation"
          fi
          
          # Create basic documentation if none exists
          if [ ! -f "docs/index.html" ]; then
            cat > docs/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Sinkii09 Engine Documentation</title>
              <meta charset="UTF-8">
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #333; }
              </style>
          </head>
          <body>
              <h1>Sinkii09 Engine Documentation</h1>
              <p>Unity Engine Framework Documentation</p>
              <p>Version: ${{ github.event.release.tag_name || github.event.inputs.version }}</p>
              <p>Release Date: $(date)</p>
          </body>
          </html>
          EOF
          fi
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.event_name == 'release'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          enable_jekyll: false