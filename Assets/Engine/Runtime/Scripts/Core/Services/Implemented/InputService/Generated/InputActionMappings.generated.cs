//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by InputActionCodeGenerator
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

namespace Sinkii09.Engine.Services
{
    /// <summary>
    /// Auto-generated enum for Player input actions
    /// </summary>
    public enum PlayerAction
    {
        Move = 0,
        Look = 1,
        Attack = 2,
        Interact = 3,
        Crouch = 4,
        Jump = 5,
        Previous = 6,
        Next = 7,
        Sprint = 8,
    }

    /// <summary>
    /// Auto-generated enum for UI input actions
    /// </summary>
    public enum UIAction
    {
        Navigate = 0,
        Submit = 1,
        Cancel = 2,
        Point = 3,
        Click = 4,
        RightClick = 5,
        MiddleClick = 6,
        ScrollWheel = 7,
        TrackedDevicePosition = 8,
        TrackedDeviceOrientation = 9,
    }

    /// <summary>
    /// Auto-generated high-performance delegate cache for input actions
    /// </summary>
    public static class InputActionMappings
    {
        private static InputSystem_Actions _inputActions;
        private static bool _isInitialized = false;

        /// <summary>
        /// Event triggered when any Player action state changes
        /// </summary>
        public static event Action<PlayerAction, UnityEngine.InputSystem.InputActionPhase> OnPlayerActionTriggered;

        /// <summary>
        /// Event triggered when any UI action state changes
        /// </summary>
        public static event Action<UIAction, UnityEngine.InputSystem.InputActionPhase> OnUIActionTriggered;

        // Player Action Delegates
        private static readonly Dictionary<PlayerAction, Func<bool>> PlayerPressedDelegates = new Dictionary<PlayerAction, Func<bool>>();
        private static readonly Dictionary<PlayerAction, Func<bool>> PlayerTriggeredDelegates = new Dictionary<PlayerAction, Func<bool>>();
        private static readonly Dictionary<PlayerAction, Func<bool>> PlayerReleasedDelegates = new Dictionary<PlayerAction, Func<bool>>();
        private static readonly Dictionary<PlayerAction, Func<float>> PlayerFloatDelegates = new Dictionary<PlayerAction, Func<float>>();
        private static readonly Dictionary<PlayerAction, Func<Vector2>> PlayerVector2Delegates = new Dictionary<PlayerAction, Func<Vector2>>();

        // UI Action Delegates
        private static readonly Dictionary<UIAction, Func<bool>> UIPressedDelegates = new Dictionary<UIAction, Func<bool>>();
        private static readonly Dictionary<UIAction, Func<bool>> UITriggeredDelegates = new Dictionary<UIAction, Func<bool>>();
        private static readonly Dictionary<UIAction, Func<bool>> UIReleasedDelegates = new Dictionary<UIAction, Func<bool>>();
        private static readonly Dictionary<UIAction, Func<float>> UIFloatDelegates = new Dictionary<UIAction, Func<float>>();
        private static readonly Dictionary<UIAction, Func<Vector2>> UIVector2Delegates = new Dictionary<UIAction, Func<Vector2>>();
        private static readonly Dictionary<UIAction, Func<Vector3>> UIVector3Delegates = new Dictionary<UIAction, Func<Vector3>>();
        private static readonly Dictionary<UIAction, Func<Quaternion>> UIQuaternionDelegates = new Dictionary<UIAction, Func<Quaternion>>();


        /// <summary>
        /// Initializes the delegate cache with InputSystem_Actions instance
        /// </summary>
        public static void Initialize(InputSystem_Actions inputActions)
        {
            // Clean up any existing subscriptions first
            if (_isInitialized)
            {
                Cleanup();
            }

            _inputActions = inputActions ?? throw new ArgumentNullException(nameof(inputActions));

            // Initialize Player delegates
            PlayerPressedDelegates[PlayerAction.Move] = () => _inputActions.Player.Move.IsPressed();
            PlayerTriggeredDelegates[PlayerAction.Move] = () => _inputActions.Player.Move.WasPressedThisFrame();
            PlayerReleasedDelegates[PlayerAction.Move] = () => _inputActions.Player.Move.WasReleasedThisFrame();
            PlayerVector2Delegates[PlayerAction.Move] = () => _inputActions.Player.Move.ReadValue<Vector2>();
            PlayerPressedDelegates[PlayerAction.Look] = () => _inputActions.Player.Look.IsPressed();
            PlayerTriggeredDelegates[PlayerAction.Look] = () => _inputActions.Player.Look.WasPressedThisFrame();
            PlayerReleasedDelegates[PlayerAction.Look] = () => _inputActions.Player.Look.WasReleasedThisFrame();
            PlayerVector2Delegates[PlayerAction.Look] = () => _inputActions.Player.Look.ReadValue<Vector2>();
            PlayerPressedDelegates[PlayerAction.Attack] = () => _inputActions.Player.Attack.IsPressed();
            PlayerTriggeredDelegates[PlayerAction.Attack] = () => _inputActions.Player.Attack.WasPressedThisFrame();
            PlayerReleasedDelegates[PlayerAction.Attack] = () => _inputActions.Player.Attack.WasReleasedThisFrame();
            PlayerPressedDelegates[PlayerAction.Interact] = () => _inputActions.Player.Interact.IsPressed();
            PlayerTriggeredDelegates[PlayerAction.Interact] = () => _inputActions.Player.Interact.WasPressedThisFrame();
            PlayerReleasedDelegates[PlayerAction.Interact] = () => _inputActions.Player.Interact.WasReleasedThisFrame();
            PlayerPressedDelegates[PlayerAction.Crouch] = () => _inputActions.Player.Crouch.IsPressed();
            PlayerTriggeredDelegates[PlayerAction.Crouch] = () => _inputActions.Player.Crouch.WasPressedThisFrame();
            PlayerReleasedDelegates[PlayerAction.Crouch] = () => _inputActions.Player.Crouch.WasReleasedThisFrame();
            PlayerPressedDelegates[PlayerAction.Jump] = () => _inputActions.Player.Jump.IsPressed();
            PlayerTriggeredDelegates[PlayerAction.Jump] = () => _inputActions.Player.Jump.WasPressedThisFrame();
            PlayerReleasedDelegates[PlayerAction.Jump] = () => _inputActions.Player.Jump.WasReleasedThisFrame();
            PlayerPressedDelegates[PlayerAction.Previous] = () => _inputActions.Player.Previous.IsPressed();
            PlayerTriggeredDelegates[PlayerAction.Previous] = () => _inputActions.Player.Previous.WasPressedThisFrame();
            PlayerReleasedDelegates[PlayerAction.Previous] = () => _inputActions.Player.Previous.WasReleasedThisFrame();
            PlayerPressedDelegates[PlayerAction.Next] = () => _inputActions.Player.Next.IsPressed();
            PlayerTriggeredDelegates[PlayerAction.Next] = () => _inputActions.Player.Next.WasPressedThisFrame();
            PlayerReleasedDelegates[PlayerAction.Next] = () => _inputActions.Player.Next.WasReleasedThisFrame();
            PlayerPressedDelegates[PlayerAction.Sprint] = () => _inputActions.Player.Sprint.IsPressed();
            PlayerTriggeredDelegates[PlayerAction.Sprint] = () => _inputActions.Player.Sprint.WasPressedThisFrame();
            PlayerReleasedDelegates[PlayerAction.Sprint] = () => _inputActions.Player.Sprint.WasReleasedThisFrame();

            // Initialize Player float delegates (for most actions, float is 1.0 when pressed, 0.0 when not)
            PlayerFloatDelegates[PlayerAction.Move] = () => _inputActions.Player.Move.IsPressed() ? 1.0f : 0.0f;
            PlayerFloatDelegates[PlayerAction.Look] = () => _inputActions.Player.Look.IsPressed() ? 1.0f : 0.0f;
            PlayerFloatDelegates[PlayerAction.Attack] = () => _inputActions.Player.Attack.IsPressed() ? 1.0f : 0.0f;
            PlayerFloatDelegates[PlayerAction.Interact] = () => _inputActions.Player.Interact.IsPressed() ? 1.0f : 0.0f;
            PlayerFloatDelegates[PlayerAction.Crouch] = () => _inputActions.Player.Crouch.IsPressed() ? 1.0f : 0.0f;
            PlayerFloatDelegates[PlayerAction.Jump] = () => _inputActions.Player.Jump.IsPressed() ? 1.0f : 0.0f;
            PlayerFloatDelegates[PlayerAction.Previous] = () => _inputActions.Player.Previous.IsPressed() ? 1.0f : 0.0f;
            PlayerFloatDelegates[PlayerAction.Next] = () => _inputActions.Player.Next.IsPressed() ? 1.0f : 0.0f;
            PlayerFloatDelegates[PlayerAction.Sprint] = () => _inputActions.Player.Sprint.IsPressed() ? 1.0f : 0.0f;

            // Initialize UI delegates
            UIPressedDelegates[UIAction.Navigate] = () => _inputActions.UI.Navigate.IsPressed();
            UITriggeredDelegates[UIAction.Navigate] = () => _inputActions.UI.Navigate.WasPressedThisFrame();
            UIReleasedDelegates[UIAction.Navigate] = () => _inputActions.UI.Navigate.WasReleasedThisFrame();
            UIVector2Delegates[UIAction.Navigate] = () => _inputActions.UI.Navigate.ReadValue<Vector2>();
            UIPressedDelegates[UIAction.Submit] = () => _inputActions.UI.Submit.IsPressed();
            UITriggeredDelegates[UIAction.Submit] = () => _inputActions.UI.Submit.WasPressedThisFrame();
            UIReleasedDelegates[UIAction.Submit] = () => _inputActions.UI.Submit.WasReleasedThisFrame();
            UIPressedDelegates[UIAction.Cancel] = () => _inputActions.UI.Cancel.IsPressed();
            UITriggeredDelegates[UIAction.Cancel] = () => _inputActions.UI.Cancel.WasPressedThisFrame();
            UIReleasedDelegates[UIAction.Cancel] = () => _inputActions.UI.Cancel.WasReleasedThisFrame();
            UIPressedDelegates[UIAction.Point] = () => _inputActions.UI.Point.IsPressed();
            UITriggeredDelegates[UIAction.Point] = () => _inputActions.UI.Point.WasPressedThisFrame();
            UIReleasedDelegates[UIAction.Point] = () => _inputActions.UI.Point.WasReleasedThisFrame();
            UIVector2Delegates[UIAction.Point] = () => _inputActions.UI.Point.ReadValue<Vector2>();
            UIPressedDelegates[UIAction.Click] = () => _inputActions.UI.Click.IsPressed();
            UITriggeredDelegates[UIAction.Click] = () => _inputActions.UI.Click.WasPressedThisFrame();
            UIReleasedDelegates[UIAction.Click] = () => _inputActions.UI.Click.WasReleasedThisFrame();
            UIPressedDelegates[UIAction.RightClick] = () => _inputActions.UI.RightClick.IsPressed();
            UITriggeredDelegates[UIAction.RightClick] = () => _inputActions.UI.RightClick.WasPressedThisFrame();
            UIReleasedDelegates[UIAction.RightClick] = () => _inputActions.UI.RightClick.WasReleasedThisFrame();
            UIPressedDelegates[UIAction.MiddleClick] = () => _inputActions.UI.MiddleClick.IsPressed();
            UITriggeredDelegates[UIAction.MiddleClick] = () => _inputActions.UI.MiddleClick.WasPressedThisFrame();
            UIReleasedDelegates[UIAction.MiddleClick] = () => _inputActions.UI.MiddleClick.WasReleasedThisFrame();
            UIPressedDelegates[UIAction.ScrollWheel] = () => _inputActions.UI.ScrollWheel.IsPressed();
            UITriggeredDelegates[UIAction.ScrollWheel] = () => _inputActions.UI.ScrollWheel.WasPressedThisFrame();
            UIReleasedDelegates[UIAction.ScrollWheel] = () => _inputActions.UI.ScrollWheel.WasReleasedThisFrame();
            UIVector2Delegates[UIAction.ScrollWheel] = () => _inputActions.UI.ScrollWheel.ReadValue<Vector2>();
            UIPressedDelegates[UIAction.TrackedDevicePosition] = () => _inputActions.UI.TrackedDevicePosition.IsPressed();
            UITriggeredDelegates[UIAction.TrackedDevicePosition] = () => _inputActions.UI.TrackedDevicePosition.WasPressedThisFrame();
            UIReleasedDelegates[UIAction.TrackedDevicePosition] = () => _inputActions.UI.TrackedDevicePosition.WasReleasedThisFrame();
            UIVector3Delegates[UIAction.TrackedDevicePosition] = () => _inputActions.UI.TrackedDevicePosition.ReadValue<Vector3>();
            UIPressedDelegates[UIAction.TrackedDeviceOrientation] = () => _inputActions.UI.TrackedDeviceOrientation.IsPressed();
            UITriggeredDelegates[UIAction.TrackedDeviceOrientation] = () => _inputActions.UI.TrackedDeviceOrientation.WasPressedThisFrame();
            UIReleasedDelegates[UIAction.TrackedDeviceOrientation] = () => _inputActions.UI.TrackedDeviceOrientation.WasReleasedThisFrame();
            UIQuaternionDelegates[UIAction.TrackedDeviceOrientation] = () => _inputActions.UI.TrackedDeviceOrientation.ReadValue<Quaternion>();

            // Initialize UI float delegates
            UIFloatDelegates[UIAction.Navigate] = () => _inputActions.UI.Navigate.IsPressed() ? 1.0f : 0.0f;
            UIFloatDelegates[UIAction.Submit] = () => _inputActions.UI.Submit.IsPressed() ? 1.0f : 0.0f;
            UIFloatDelegates[UIAction.Cancel] = () => _inputActions.UI.Cancel.IsPressed() ? 1.0f : 0.0f;
            UIFloatDelegates[UIAction.Point] = () => _inputActions.UI.Point.IsPressed() ? 1.0f : 0.0f;
            UIFloatDelegates[UIAction.Click] = () => _inputActions.UI.Click.IsPressed() ? 1.0f : 0.0f;
            UIFloatDelegates[UIAction.RightClick] = () => _inputActions.UI.RightClick.IsPressed() ? 1.0f : 0.0f;
            UIFloatDelegates[UIAction.MiddleClick] = () => _inputActions.UI.MiddleClick.IsPressed() ? 1.0f : 0.0f;
            UIFloatDelegates[UIAction.ScrollWheel] = () => _inputActions.UI.ScrollWheel.IsPressed() ? 1.0f : 0.0f;
            UIFloatDelegates[UIAction.TrackedDevicePosition] = () => _inputActions.UI.TrackedDevicePosition.IsPressed() ? 1.0f : 0.0f;
            UIFloatDelegates[UIAction.TrackedDeviceOrientation] = () => _inputActions.UI.TrackedDeviceOrientation.IsPressed() ? 1.0f : 0.0f;

            // Setup Player action events
            _inputActions.Player.Move.started += OnPlayerActionEvent;
            _inputActions.Player.Move.performed += OnPlayerActionEvent;
            _inputActions.Player.Move.canceled += OnPlayerActionEvent;
            _inputActions.Player.Look.started += OnPlayerActionEvent;
            _inputActions.Player.Look.performed += OnPlayerActionEvent;
            _inputActions.Player.Look.canceled += OnPlayerActionEvent;
            _inputActions.Player.Attack.started += OnPlayerActionEvent;
            _inputActions.Player.Attack.performed += OnPlayerActionEvent;
            _inputActions.Player.Attack.canceled += OnPlayerActionEvent;
            _inputActions.Player.Interact.started += OnPlayerActionEvent;
            _inputActions.Player.Interact.performed += OnPlayerActionEvent;
            _inputActions.Player.Interact.canceled += OnPlayerActionEvent;
            _inputActions.Player.Crouch.started += OnPlayerActionEvent;
            _inputActions.Player.Crouch.performed += OnPlayerActionEvent;
            _inputActions.Player.Crouch.canceled += OnPlayerActionEvent;
            _inputActions.Player.Jump.started += OnPlayerActionEvent;
            _inputActions.Player.Jump.performed += OnPlayerActionEvent;
            _inputActions.Player.Jump.canceled += OnPlayerActionEvent;
            _inputActions.Player.Previous.started += OnPlayerActionEvent;
            _inputActions.Player.Previous.performed += OnPlayerActionEvent;
            _inputActions.Player.Previous.canceled += OnPlayerActionEvent;
            _inputActions.Player.Next.started += OnPlayerActionEvent;
            _inputActions.Player.Next.performed += OnPlayerActionEvent;
            _inputActions.Player.Next.canceled += OnPlayerActionEvent;
            _inputActions.Player.Sprint.started += OnPlayerActionEvent;
            _inputActions.Player.Sprint.performed += OnPlayerActionEvent;
            _inputActions.Player.Sprint.canceled += OnPlayerActionEvent;

            // Setup UI action events
            _inputActions.UI.Navigate.started += OnUIActionEvent;
            _inputActions.UI.Navigate.performed += OnUIActionEvent;
            _inputActions.UI.Navigate.canceled += OnUIActionEvent;
            _inputActions.UI.Submit.started += OnUIActionEvent;
            _inputActions.UI.Submit.performed += OnUIActionEvent;
            _inputActions.UI.Submit.canceled += OnUIActionEvent;
            _inputActions.UI.Cancel.started += OnUIActionEvent;
            _inputActions.UI.Cancel.performed += OnUIActionEvent;
            _inputActions.UI.Cancel.canceled += OnUIActionEvent;
            _inputActions.UI.Point.started += OnUIActionEvent;
            _inputActions.UI.Point.performed += OnUIActionEvent;
            _inputActions.UI.Point.canceled += OnUIActionEvent;
            _inputActions.UI.Click.started += OnUIActionEvent;
            _inputActions.UI.Click.performed += OnUIActionEvent;
            _inputActions.UI.Click.canceled += OnUIActionEvent;
            _inputActions.UI.RightClick.started += OnUIActionEvent;
            _inputActions.UI.RightClick.performed += OnUIActionEvent;
            _inputActions.UI.RightClick.canceled += OnUIActionEvent;
            _inputActions.UI.MiddleClick.started += OnUIActionEvent;
            _inputActions.UI.MiddleClick.performed += OnUIActionEvent;
            _inputActions.UI.MiddleClick.canceled += OnUIActionEvent;
            _inputActions.UI.ScrollWheel.started += OnUIActionEvent;
            _inputActions.UI.ScrollWheel.performed += OnUIActionEvent;
            _inputActions.UI.ScrollWheel.canceled += OnUIActionEvent;
            _inputActions.UI.TrackedDevicePosition.started += OnUIActionEvent;
            _inputActions.UI.TrackedDevicePosition.performed += OnUIActionEvent;
            _inputActions.UI.TrackedDevicePosition.canceled += OnUIActionEvent;
            _inputActions.UI.TrackedDeviceOrientation.started += OnUIActionEvent;
            _inputActions.UI.TrackedDeviceOrientation.performed += OnUIActionEvent;
            _inputActions.UI.TrackedDeviceOrientation.canceled += OnUIActionEvent;

            _isInitialized = true;
            Debug.Log($"[InputActionMappings] Initialized delegate cache with {_inputActions.GetType().Name}");
        }

        /// <summary>
        /// Properly cleans up all event subscriptions and resets state
        /// </summary>
        public static void Cleanup()
        {
            if (!_isInitialized || _inputActions == null)
            {
                Debug.Log("[InputActionMappings] Cleanup called but not initialized, skipping.");
                return;
            }

            Debug.Log("[InputActionMappings] Cleaning up event subscriptions...");

            // Unsubscribe from Player action events
            _inputActions.Player.Move.started -= OnPlayerActionEvent;
            _inputActions.Player.Move.performed -= OnPlayerActionEvent;
            _inputActions.Player.Move.canceled -= OnPlayerActionEvent;
            _inputActions.Player.Look.started -= OnPlayerActionEvent;
            _inputActions.Player.Look.performed -= OnPlayerActionEvent;
            _inputActions.Player.Look.canceled -= OnPlayerActionEvent;
            _inputActions.Player.Attack.started -= OnPlayerActionEvent;
            _inputActions.Player.Attack.performed -= OnPlayerActionEvent;
            _inputActions.Player.Attack.canceled -= OnPlayerActionEvent;
            _inputActions.Player.Interact.started -= OnPlayerActionEvent;
            _inputActions.Player.Interact.performed -= OnPlayerActionEvent;
            _inputActions.Player.Interact.canceled -= OnPlayerActionEvent;
            _inputActions.Player.Crouch.started -= OnPlayerActionEvent;
            _inputActions.Player.Crouch.performed -= OnPlayerActionEvent;
            _inputActions.Player.Crouch.canceled -= OnPlayerActionEvent;
            _inputActions.Player.Jump.started -= OnPlayerActionEvent;
            _inputActions.Player.Jump.performed -= OnPlayerActionEvent;
            _inputActions.Player.Jump.canceled -= OnPlayerActionEvent;
            _inputActions.Player.Previous.started -= OnPlayerActionEvent;
            _inputActions.Player.Previous.performed -= OnPlayerActionEvent;
            _inputActions.Player.Previous.canceled -= OnPlayerActionEvent;
            _inputActions.Player.Next.started -= OnPlayerActionEvent;
            _inputActions.Player.Next.performed -= OnPlayerActionEvent;
            _inputActions.Player.Next.canceled -= OnPlayerActionEvent;
            _inputActions.Player.Sprint.started -= OnPlayerActionEvent;
            _inputActions.Player.Sprint.performed -= OnPlayerActionEvent;
            _inputActions.Player.Sprint.canceled -= OnPlayerActionEvent;

            // Unsubscribe from UI action events
            _inputActions.UI.Navigate.started -= OnUIActionEvent;
            _inputActions.UI.Navigate.performed -= OnUIActionEvent;
            _inputActions.UI.Navigate.canceled -= OnUIActionEvent;
            _inputActions.UI.Submit.started -= OnUIActionEvent;
            _inputActions.UI.Submit.performed -= OnUIActionEvent;
            _inputActions.UI.Submit.canceled -= OnUIActionEvent;
            _inputActions.UI.Cancel.started -= OnUIActionEvent;
            _inputActions.UI.Cancel.performed -= OnUIActionEvent;
            _inputActions.UI.Cancel.canceled -= OnUIActionEvent;
            _inputActions.UI.Point.started -= OnUIActionEvent;
            _inputActions.UI.Point.performed -= OnUIActionEvent;
            _inputActions.UI.Point.canceled -= OnUIActionEvent;
            _inputActions.UI.Click.started -= OnUIActionEvent;
            _inputActions.UI.Click.performed -= OnUIActionEvent;
            _inputActions.UI.Click.canceled -= OnUIActionEvent;
            _inputActions.UI.RightClick.started -= OnUIActionEvent;
            _inputActions.UI.RightClick.performed -= OnUIActionEvent;
            _inputActions.UI.RightClick.canceled -= OnUIActionEvent;
            _inputActions.UI.MiddleClick.started -= OnUIActionEvent;
            _inputActions.UI.MiddleClick.performed -= OnUIActionEvent;
            _inputActions.UI.MiddleClick.canceled -= OnUIActionEvent;
            _inputActions.UI.ScrollWheel.started -= OnUIActionEvent;
            _inputActions.UI.ScrollWheel.performed -= OnUIActionEvent;
            _inputActions.UI.ScrollWheel.canceled -= OnUIActionEvent;
            _inputActions.UI.TrackedDevicePosition.started -= OnUIActionEvent;
            _inputActions.UI.TrackedDevicePosition.performed -= OnUIActionEvent;
            _inputActions.UI.TrackedDevicePosition.canceled -= OnUIActionEvent;
            _inputActions.UI.TrackedDeviceOrientation.started -= OnUIActionEvent;
            _inputActions.UI.TrackedDeviceOrientation.performed -= OnUIActionEvent;
            _inputActions.UI.TrackedDeviceOrientation.canceled -= OnUIActionEvent;

            // Clear static events to prevent memory leaks
            OnPlayerActionTriggered = null;
            OnUIActionTriggered = null;

            // Reset state
            _inputActions = null;
            _isInitialized = false;

            Debug.Log("[InputActionMappings] Cleanup completed successfully.");
        }

        #region Player Action Methods

        public static bool IsActionPressed(PlayerAction action)
        {
            EnsureInitialized();
            return PlayerPressedDelegates[action]();
        }

        public static bool IsActionTriggered(PlayerAction action)
        {
            EnsureInitialized();
            return PlayerTriggeredDelegates[action]();
        }

        public static bool IsActionReleased(PlayerAction action)
        {
            EnsureInitialized();
            return PlayerReleasedDelegates[action]();
        }

        public static float GetFloatValue(PlayerAction action)
        {
            EnsureInitialized();
            return PlayerFloatDelegates.TryGetValue(action, out var del) ? del() : 0f;
        }

        public static Vector2 GetVector2Value(PlayerAction action)
        {
            EnsureInitialized();
            return PlayerVector2Delegates.TryGetValue(action, out var del) ? del() : Vector2.zero;
        }

        #endregion

        #region UI Action Methods

        public static bool IsActionPressed(UIAction action)
        {
            EnsureInitialized();
            return UIPressedDelegates[action]();
        }

        public static bool IsActionTriggered(UIAction action)
        {
            EnsureInitialized();
            return UITriggeredDelegates[action]();
        }

        public static bool IsActionReleased(UIAction action)
        {
            EnsureInitialized();
            return UIReleasedDelegates[action]();
        }

        public static float GetFloatValue(UIAction action)
        {
            EnsureInitialized();
            return UIFloatDelegates.TryGetValue(action, out var del) ? del() : 0f;
        }

        public static Vector2 GetVector2Value(UIAction action)
        {
            EnsureInitialized();
            return UIVector2Delegates.TryGetValue(action, out var del) ? del() : Vector2.zero;
        }

        #endregion

        private static void EnsureInitialized()
        {
            if (!_isInitialized)
                throw new InvalidOperationException("InputActionMappings must be initialized before use. Call Initialize() first.");
        }

        private static void OnPlayerActionEvent(InputAction.CallbackContext ctx)
        {
            try
            {
                var actionName = ctx.action.name;
                var action = GetPlayerActionFromName(actionName);
                OnPlayerActionTriggered?.Invoke(action, ctx.phase);
            }
            catch (Exception ex)
            {
                Debug.LogError($"[InputActionMappings] Error in player action event: {ex.Message}");
            }
        }

        private static void OnUIActionEvent(InputAction.CallbackContext ctx)
        {
            try
            {
                var actionName = ctx.action.name;
                var action = GetUIActionFromName(actionName);
                OnUIActionTriggered?.Invoke(action, ctx.phase);
            }
            catch (Exception ex)
            {
                Debug.LogError($"[InputActionMappings] Error in UI action event: {ex.Message}");
            }
        }

        private static PlayerAction GetPlayerActionFromName(string actionName)
        {
            return actionName switch
            {
                "Move" => PlayerAction.Move,
                "Look" => PlayerAction.Look,
                "Attack" => PlayerAction.Attack,
                "Interact" => PlayerAction.Interact,
                "Crouch" => PlayerAction.Crouch,
                "Jump" => PlayerAction.Jump,
                "Previous" => PlayerAction.Previous,
                "Next" => PlayerAction.Next,
                "Sprint" => PlayerAction.Sprint,
                _ => throw new ArgumentException($"Unknown player action: {actionName}")
            };
        }

        private static UIAction GetUIActionFromName(string actionName)
        {
            return actionName switch
            {
                "Navigate" => UIAction.Navigate,
                "Submit" => UIAction.Submit,
                "Cancel" => UIAction.Cancel,
                "Point" => UIAction.Point,
                "Click" => UIAction.Click,
                "RightClick" => UIAction.RightClick,
                "MiddleClick" => UIAction.MiddleClick,
                "ScrollWheel" => UIAction.ScrollWheel,
                "TrackedDevicePosition" => UIAction.TrackedDevicePosition,
                "TrackedDeviceOrientation" => UIAction.TrackedDeviceOrientation,
                _ => throw new ArgumentException($"Unknown UI action: {actionName}")
            };
        }

    }
}
